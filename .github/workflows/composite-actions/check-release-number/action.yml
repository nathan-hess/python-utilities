# !! IMPORTANT !!
#
# Prior to running this composite action, make sure that you have:
#  - Checked out the repository (@actions/checkout) with `fetch-depth: 0`
#  - Set up the desired version of Python 3 (@actions/setup-python)
#
# If these steps are not performed, the workflow may not function correctly
#
#
# Known limitations
#  - Workflow may fail if attempting to tag the same commit more than once
#    (this limitation was left in place intentionally, as there are few cases
#    where it makes sense to publish a release for the same commit multiple
#    times, so this provides a useful warning)

name: Check Release Number Composite Action
description: Verifies that a GitHub release matches Python package version and that the release number increment follows Semantic Versioning

inputs:
  package-name:
    description: Name of package whose version is to be checked
    required: true

  # The "release-tag" input could theoretically be obtained within this action,
  # but it is specified as an input to prevent injection attacks
  # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
  release-tag:
    description: Tag assigned to GitHub release
    required: true

  src-dir:
    description: Directory where source files are located
    required: false
    default: $GITHUB_WORKSPACE

runs:
  using: composite
  steps:
    - name: Verify that Release Tag Matches Package Version
      if: ${{ always() }}
      shell: bash
      run: |
        RED='\033[1;31m' ; GREEN='\033[1;32m' ; PLAIN='\033[0m'
        cd "${{ inputs.src-dir }}"
        package_version="v$(python3 -c 'import ${{ inputs.package-name }} ; print(${{ inputs.package-name }}.__version__)')"
        if [[ "${{ inputs.release-tag }}" != "${package_version}" ]]; then
          echo -e "${RED}GitHub release tag ${{ inputs.release-tag }} does not match ${{ inputs.package-name }}.__version__ ${package_version}${PLAIN}"
          exit 1
        else
          echo -e "${GREEN}GitHub release tag ${{ inputs.release-tag }} matches ${{ inputs.package-name }}.__version__ ${package_version}${PLAIN}"
        fi

    - name: Check Release Number Increment
      if: ${{ always() }}
      shell: bash
      run: |
        old_version="$(git for-each-ref --sort=-creatordate --format='%(refname)' refs/tags | sed -n 2p | rev | cut -d "/" -f1 | rev)"
        new_version="${{ inputs.release-tag }}"
        if [[ "${old_version}" != "" ]]; then
          python3 "$GITHUB_WORKSPACE/.github/workflows/composite-actions/check-release-number/check_version.py" \
            --old-version="${old_version}" \
            --new-version="${new_version}"
        else
          echo "No previous tags found"
        fi

    - name: Display Suggested Next Steps in Event of Failure
      if: ${{ failure() }}
      shell: bash
      run: |
        RED='\033[1;31m' ; PLAIN='\033[0m'
        echo -e "${RED}GitHub release tag does not match expected formatting guidelines${PLAIN}"
        echo
        echo -e "${RED}It is recommended that you revert the release by running:${PLAIN}"
        echo -e "${RED}    git push --delete origin ${{ inputs.release-tag }}${PLAIN}"
