name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]
  workflow_dispatch:

env:
  PYTHON_RELEASE_VERSION: '3.8'

jobs:

  ## SETUP -------------------------------------------------------------------
  # Set up the workflow (load environment variables, install dependencies) and
  # provide data (Python version matrix) for subsequent jobs
  setup:
    name: Workflow Setup
    uses: ./.github/workflows/_get_python_version_matrix.yml


  ## PYTHON TESTS ------------------------------------------------------------
  # Run Python unit and integration tests
  test:
    name: Python Tests (Python ${{ matrix.python-version }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - name: Check Out Repository Files
        uses: actions/checkout@v3

      - name: Run Setup Action
        uses: ./.github/workflows/composite-actions/setup
        with:
          python-version: ${{ matrix.python-version }}
          pip-requirements-file: requirements.txt

      - name: Run Python Tests
        run: python3 run_tests.py

  test-success:
    name: Determine Python Test Success
    needs: test
    if: ${{ success() }}
    uses: ./.github/workflows/_matrix_output_success.yml

  test-status-check:
    name: Python Tests
    needs: test-success
    if: ${{ always() }}
    uses: ./.github/workflows/_matrix_status_check.yml
    with:
      success: ${{ needs.test-success.outputs.success }}


  ## LINTING -----------------------------------------------------------------
  # Run several Python code linters to enforce code style and reduce
  # the risk of bugs
  linting:
    name: Python Code Linting (Python ${{ matrix.python-version }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - name: Check Out Repository Files
        uses: actions/checkout@v3

      - name: Run Setup Action
        uses: ./.github/workflows/composite-actions/setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run Linting with Pylint
        if: ${{ always() }}
        run: pylint "${{ env.PACKAGE_NAME }}"

      - name: Run Linting with Flake8
        if: ${{ always() }}
        run: flake8 --count "${{ env.PACKAGE_NAME }}"

      - name: Run Static Type Checking with Mypy
        if: ${{ always() }}
        run: mypy "${{ env.PACKAGE_NAME }}"

  linting-success:
    name: Determine Python Code Linting Success
    needs: linting
    if: ${{ success() }}
    uses: ./.github/workflows/_matrix_output_success.yml

  linting-status-check:
    name: Python Code Linting
    needs: linting-success
    if: ${{ always() }}
    uses: ./.github/workflows/_matrix_status_check.yml
    with:
      success: ${{ needs.linting-success.outputs.success }}


  ## SECURITY ANALYSIS -------------------------------------------------------
  # Run Bandit to check for security vulnerabilities
  bandit:
    name: Bandit Scan (Python ${{ matrix.python-version }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - name: Check Out Repository Files
        uses: actions/checkout@v3

      - name: Run Setup Action
        uses: ./.github/workflows/composite-actions/setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run Security Analysis Scan
        run: bandit -rv "${{ env.PACKAGE_NAME }}"

  bandit-success:
    name: Determine Bandit Scan Success
    needs: bandit
    if: ${{ success() }}
    uses: ./.github/workflows/_matrix_output_success.yml

  bandit-status-check:
    name: Bandit Scan
    needs: bandit-success
    if: ${{ always() }}
    uses: ./.github/workflows/_matrix_status_check.yml
    with:
      success: ${{ needs.bandit-success.outputs.success }}


  ## SPHINX DOCUMENTATION TESTS ----------------------------------------------
  # Checks the project documentation for build and spelling issues
  doc-tests:
    name: Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository Files
        uses: actions/checkout@v3

      - name: Run Setup Action
        uses: ./.github/workflows/composite-actions/setup
        with:
          python-version: ${{ env.PYTHON_RELEASE_VERSION }}
          pip-requirements-file: docs/requirements.txt

      - name: Build Documentation
        if: ${{ always() }}
        run: |
          cd $GITHUB_WORKSPACE/docs
          SPHINXOPTS="-W" make html

      - name: Run Spell-Checking
        if: ${{ always() }}
        run: |
          cd $GITHUB_WORKSPACE/docs
          SPHINXOPTS="-W" make spelling
